----------------------PositionViewModel---------------------
public ICommand Add { get; private set; }
public ICommand Edit { get; private set; }
public ICommand Remove { get; private set; }
public ICommand Search { get; private set; }
private ObservableCollection<Position> _positions = new ObservableCollection<Position>();
public ObservableCollection<Position> Positions
{
get => _positions;
set => this.RaiseAndSetIfChanged(ref _positions, value);
}
private string _searchText;
public string SearchText
{
get => _searchText;
set => this.RaiseAndSetIfChanged(ref _searchText, value);
}
private Position _positionSelected;
public Position PositionSelected
{
get => _positionSelected;
set => this.RaiseAndSetIfChanged(ref _positionSelected, value);
}
private Position _positionBuffer;
public Position PositionBuffer
{
get => _positionBuffer;
set => this.RaiseAndSetIfChanged(ref _positionBuffer, value);
}
ApplicationContext db;
public PositionPageViewModel(ApplicationContext applicationContext)
{
db = applicationContext;
Positions = new(db.Positions.ToList());
Add = ReactiveCommand.Create(() => 
 { 

try
{
if (ApplicationContext.validData(PositionBuffer))
{
Positions.Add(PositionBuffer);
db.Positions.Add(PositionBuffer);
db.SaveChanges();
}
}
catch (Exception ex) { }
});
Edit = ReactiveCommand.Create(() => 
 { 

try
{
if (ApplicationContext.validData(PositionSelected))
{
db.Positions.Update(PositionSelected);
db.SaveChanges();
}
}
catch (Exception ex) { }
});
Remove = ReactiveCommand.Create(() => 
 { 

if (PositionSelected != null)
{
Positions.Remove(PositionSelected);
db.Positions.Remove(PositionSelected);
db.SaveChanges();
}
});
Search = ReactiveCommand.Create(() => 
 { 

if (SearchText == null)
{
Positions = new(db.Positions
.ToList());
return;
}
Positions = new(db.Positions
.Where(x => x.___.Contains(SearchText))
.ToList());
});
}
